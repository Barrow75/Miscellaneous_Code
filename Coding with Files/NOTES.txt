--- ENCODING UTF-8

> UTF-8:
    - Unicode Transformation Format 8 bit
    - A character encoding standard that uses one to four bytes to represent any Unicode code point, making it the most compatible with ASCII.
    - How it works:
          - Code points from 0 to 127 which corresponds to ASCII characters and are represented by using bytes; other characters require two, three, or four bytes
    - Importance:
          - Allows for the display of text in various laguages and scripts

  In Coding:
         ~ With the encoding='utf-8':

          with open("file.txt", 'w', encoding='utf-8') as f:
          > Ensures the file is written using UTF-8 encoding
          > Avoids encoding related errors when working with special characters such as emojis, non English text and accents
          > Ensures compatibility across different operating systems
          > With the UTF-8 it saves the file correctly so if it is opened in a different editor/ OS then there are no issues
          >
          >



--- Reading From File

> read():
    Read the Entire File as a single string

    - When to use:
            - When the file is small
                    - Avoids memory issues
            - Load the entire file into a single string.
                    - If you are analyzing a large document to search for words, counting occurances and moifying text. This works                             faster than looping through lines because it processes it in one go.
            - Working with structured formats like JSON or XML
                    - These are often one large structured block rather than seperate lines 
            - Modifyng text (removing certain words or replacing characters)
                    - Using string methods such as .replace or .split()
                        - In Coding:
                                with open("example.txt", 'r') as file:
                                    contents_in_file = file.read
                                replace_contents_in_file = contents_in_file.replace('word you want to replace', 'replaced word')

            - When you want to split the text into custom sections
                    - This gives you more control if the contents in the file is not formatted line by line
            - Dealing with paragraphs and not lines

    - When NOT to use:
            - If you are dealing with files that are too large (1GB+)
            - When you need one line at a time 
            - If processing the text line by line making more sense


> readline()
    Read One Line At A Time

    - When to use:
            - You want to process the file line by line
            - Dont want to load the whole file into memory at one
                    - This helps with memory issues and will help when dealing with very large files

    - When NOT to use:
            - When you need to iterate over all lines
            - You need all lines at once


> readlines()
    Read All Lines As A List

    - When to use:
            - You need to get all lines as a list
            - You want to loop over the lines multiple times
            - Process each line separately but still store them all
            - Dealing with medium files
                - 1 MB to 100 MB
            - 

--- write() vs writer() ---


> write()
    Built in file method used to write a single striong to a text or binary file

    - When to use:
            - When you are dealing with raw text such as a text file (.txt) or a log file (.log)

> writer()
    Part of the CSV module
    Creates a specil object to write data into a CSV file
    Handles formatting, quoting and escaping automatically

    - When to use:
            - When you are writing structured tabular data into a CSV file

